<?php

/**
 * Implements hook_install().
 */
function jcl_collapse_install() {
	$type_name = 'collapsible_menu';
	$t = get_t();
	//  Verify the content type does not already exist.
	$array = node_type_get_names();
	if(isset($array[$type_name])){
		return;
	}

	//  Create the type definition array.
	$type = array(
		'type'			=> $type_name,
		'name'			=> $t('Collapsible Menu'),
		'base'			=> 'node_content',
		'module'		=> 'node',
		'has_title'		=> 1,
		'description'	=> $t('A collapsible menu of links that is used as a block on various pages.'),
		'custom'		=> 1,
		'modified'		=> 1,
		'locked'		=> 0,
		'disabled'		=> 0,
		'orig_type'		=> $type_name,
		'comment' => array(
				'status' => 2,
				),
		);
	$type = node_type_set_defaults($type);
	node_type_save($type);
	// Check if we create content type or update.
	$status = node_type_save($type);
	// add the fields
	_jcl_collapse_add_fields();
	// output a message when it completes
	$t_args = array('%name' => $type->name);
	if ($status == SAVED_UPDATED) { // update case
		drupal_set_message($t('The content type %name has been updated.', $t_args));
	} 
	elseif ($status == SAVED_NEW) { // create case
		drupal_set_message($t('The content type %name has been added.', $t_args));
		watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types')); 
	}
}

function jcl_collapse_uninstall() {
	// Gather all the example content that might have been created while this
	// module was enabled.  Simple selects still use db_query().
	// http://api.drupal.org/api/function/db_query/7
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => 'collapsible_menu'));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}
	// Delete all the nodes at once
	node_delete_multiple($nids);
	// Delete our content type
	node_type_delete('collapsible_menu');
	field_delete_field('field_collapsible_location');
	field_delete_field('field_collapsible_link');
}

function _jcl_collapse_add_fields() {
	// add the location field
	$field_name = 'field_collapsible_location';
	//  Verify the field does not already exist.
	if (! field_info_field( $field_name ) ) {
		//  Create the field definition array.
		$field = array(
			'field_name' => $field_name,
			'type' => 'text',
			'cardinality'	=> 1,
		);
		//  Create the field.
		$field = field_create_field( $field );

		//  Create the field instance definition array.
		$instance = array(
			'field_name'	=> $field['field_name'],
			'entity_type'	=> 'node',
			'bundle'		=> 'collapsible_menu',
			'description'	=> "The page where the drop down list will be located. Use <b>front</b> to indicate front page. Use the relative path to site sub pages.<br>For example if the URL is: <b>www.example.com/page1</b> then enter <b>page1</b>",
			'label'			=> 'Location',
			'widget'		=> array(
				'type' => 'textfield',
			),
		);
		//  Create an instance of the field and bind it to the bundle.
		field_create_instance($instance);
	}
	// add the link field
	$field_name = 'field_collapsible_link';
	//  Verify the field does not already exist.
	if (! field_info_field( $field_name ) ) {
		//  Create the field definition array.
		$field = array(
			'field_name' => $field_name,
			'type' => 'link_field',
			'cardinality'	=> -1,
		);
		//  Create the field.
		$field = field_create_field( $field );

		//  Create the field instance definition array.
		$instance = array(
			'field_name'	=> $field['field_name'],
			'entity_type'	=> 'node',
			'bundle'		=> 'collapsible_menu',
			'description'	=> "The URL and title of the link. URL should include the complete path as it appears in the address bar.",
			'label'			=> 'Link',
			'widget'		=> array(
				'type'			=> 'link_field',
				'module'		=> 'link',
				'absolute_url'	=> 1,
				'validate_url'	=> 1,
				'title'			=> 'required',
			),
		);
		//  Create an instance of the field and bind it to the bundle.
		field_create_instance($instance);
	}

	$field_name = 'field_collapsible_weight';
	//  Verify the field does not already exist.

	//  Create the field.
	if (! field_info_field( $field_name ) ) {
		//  Create the field definition array.
		$field = array(
			'field_name' => $field_name,
			'type' => 'text',
			'cardinality'	=> 1,
		);
		//  Create the field.
		$field = field_create_field( $field );

		//  Create the field instance definition array.
		$instance = array(
			'field_name'	=> $field['field_name'],
			'entity_type'	=> 'node',
			'bundle'		=> 'collapsible_menu',
			'description'	=> "Used for custom sorting of menu lists.",
			'label'			=> 'Weight',
			'widget'		=> array(
				'type' => 'textfield',
			),
		);
		//  Create an instance of the field and bind it to the bundle.
		field_create_instance($instance);
	}

	$field_name = 'field_collapsible_class';
	//  Verify the field does not already exist.

	//  Create the field.
	if (! field_info_field( $field_name ) ) {
		//  Create the field definition array.
		$field = array(
			'field_name' => $field_name,
			'type' => 'text',
			'cardinality'	=> -1,
		);
		//  Create the field.
		$field = field_create_field( $field );

		//  Create the field instance definition array.
		$instance = array(
			'field_name'	=> $field['field_name'],
			'entity_type'	=> 'node',
			'bundle'		=> 'collapsible_menu',
			'description'	=> "Used for custom classing for themeing purposes",
			'label'			=> 'Class',
			'widget'		=> array(
				'type' => 'textfield',
			),
		);
		//  Create an instance of the field and bind it to the bundle.
		field_create_instance($instance);
	}
}

